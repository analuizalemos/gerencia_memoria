# -*- coding: utf-8 -*-
"""gerencia_memoria

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M2o4OLP7vuAIBGknaMSwQLUGkqvGnCEb

**Integrantes do grupo:**

Ana Luiza
Bruna
Gabriela
Leonardo
Yago
"""

# Definindo a função 'best_fit'
def best_fit():
    # Define as partições de memória iniciais com seus tamanhos
    memoria = {"a1": 5, "a2": 3, "a3": 3, "a4": 4}
    # Define os tamanhos dos programas a serem alocados
    programas = {"w": 4, "y": 3, "x": 1, "z": 2}
    
    # Percorre cada programa e seu tamanho
    for programa, tamanho_programa in programas.items():
        melhor_particao = None  # Inicializa a melhor partição como None
        tamanho_minimo = float('inf')  # Inicializa o tamanho mínimo como infinito
        
        # Percorre cada partição de memória e seu tamanho
        for particao, tamanho_particao in memoria.items():
            # Verifica se o tamanho da partição é suficiente para o programa
            if tamanho_particao >= tamanho_programa:
                # Verifica se o tamanho da partição é menor que o mínimo atual
                if tamanho_particao < tamanho_minimo:
                    tamanho_minimo = tamanho_particao  # Atualiza o tamanho mínimo
                    melhor_particao = particao  # Atualiza a melhor partição
        
        # Se uma partição adequada for encontrada
        if melhor_particao:
            memoria[melhor_particao] -= tamanho_programa  # Aloca a memória
            print(f"Programa '{programa}' alocado na partição '{melhor_particao}'")


# Definindo a função 'worst_fit'
def worst_fit():
    # Define as partições de memória iniciais com seus tamanhos
    memoria = {"a1": 5, "a2": 3, "a3": 3, "a4": 4}
    # Define os tamanhos dos programas a serem alocados
    programas = {"w": 4, "y": 3, "x": 1, "z": 2}
    
    # Percorre cada programa e seu tamanho
    for programa, tamanho_programa in programas.items():
        pior_particao = None  # Inicializa a pior partição como None
        tamanho_maximo = 0  # Inicializa o tamanho máximo como 0
        
        # Percorre cada partição de memória e seu tamanho
        for particao, tamanho_particao in memoria.items():
            # Verifica se o tamanho da partição é suficiente para o programa
            if tamanho_particao >= tamanho_programa:
                # Verifica se o tamanho da partição é maior que o máximo atual
                if tamanho_particao > tamanho_maximo:
                    tamanho_maximo = tamanho_particao  # Atualiza o tamanho máximo
                    pior_particao = particao  # Atualiza a pior partição
        
        # Se uma partição adequada for encontrada
        if pior_particao:
            memoria[pior_particao] -= tamanho_programa  # Aloca a memória
            print(f"Programa '{programa}' alocado na partição '{pior_particao}'")


# Definindo a função 'first_fit'
def first_fit():
    # Define as partições de memória iniciais com seus tamanhos
    memoria = {"a1": 5, "a2": 3, "a3": 3, "a4": 4}
    # Define os tamanhos dos programas a serem alocados
    programas = {"w": 4, "y": 3, "x": 1, "z": 2}
    
    # Percorre cada programa e seu tamanho
    for programa, tamanho_programa in programas.items():
        # Percorre cada partição de memória e seu tamanho
        for particao, tamanho_particao in memoria.items():
            # Verifica se o tamanho da partição é suficiente para o programa
            if tamanho_particao >= tamanho_programa:
                memoria[particao] -= tamanho_programa  # Aloca a memória
                print(f"Programa '{programa}' alocado na partição '{particao}'")
                break  # Interrompe a busca por uma partição assim que for alocada


# Exibindo informações iniciais
print(("\npartições livres: 5K, 3K, 3K e 4K\n").upper())
print(("\nrequisições entram na seguinte ordem:"
      "\n1º- Programa W (4K)"
      "\n2º- Programa Y (3K)"
      "\n3º- Programa X (1K)"
      "\n4º- Programa Z (2K)\n").upper())

# Executando os algoritmos de alocação e exibindo os resultados
print("\nBEST-FIT")
best_fit()

print("\nWORST-FIT")
worst_fit()

print("\nFIRST-FIT")
first_fit()
